mixin save-button
  hr.clearfix
  .form-group
    label.col-sm-2.control-label
    .col-sm-10
      button.btn.btn-success.btn-lg(type="submit")
        i.fa.fa-check
        =" "
        =__("Save")

mixin websites(websites)
  .form-group
    label.col-sm-2.control-label=__("Websites")
    .col-sm-10
      if websites
        #websites
      button.add-website.btn.btn-default(type="button")
        i.fa.fa-plus
        =" "
        =__("Add website")
  script(id="website", type="text/x-handlebars-template")
    .input-group.website
      input.form-control(autocomplete="off", name="websites[]", value="{{website}}", type="url", required)
      .input-group-btn
        button.delete-website.btn.btn-danger(type="button")
          i.fa.fa-trash
  //- FIXME
  script.
    $(document).ready(function() {
      var source   = $("#website").html();
      var template = Handlebars.compile(source);
      var data = !{JSON.stringify(websites)};
      data.forEach(function(website) {
        $(template({ website: website})).appendTo($('#websites'));
      });
      $(document).on('click', '.delete-website', function(ev) {
        ev.preventDefault();
        $(this).closest('.website').remove();
      });
      $(document).on('click', '.add-website', function(ev) {
        ev.preventDefault();
        $(template({})).appendTo($('#websites'));
      });
    });

mixin locations(locations)
  fieldset
    legend=__("Locations")
    #locations.row
    .row
      .col-md-10.col-md-offset-2
        button.add-location.btn.btn-default(type="button")
          i.fa.fa-plus
          =" "
          =__("Add location")
  script(id="location", type="text/x-handlebars-template")
    .modal.fade(id="location{{i}}")
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type="button", data-dismiss="modal")
              span="Ã—"
            h4.modal-title=__("Search location")
          .modal-body
            .input-group
              input.address.form-control
              span.input-group-btn
                button.search-address.btn.btn-default(type="button")
                  i.fa.fa-search
            .result.well-sm
            .map(id="map{{i}}")
          .modal-footer
            button.btn.btn-secondary(type="button", data-dismiss="modal")
              =__("Cancel")
            button.save-address.btn.btn-primary.disabled(type="button")
              =__("Ok")
    .location.col-md-10.col-md-offset-2
      .panel.panel-default
        .panel-body
          .row
            .col-md-12.text-right
              .btn-group
                button.show-location.btn.btn-default(type="button", data-toggle="modal", data-id="{{i}}", data-target="#location{{i}}")
                  i.fa.fa-pencil
                button.delete-location.btn.btn-danger
                  i.fa.fa-trash
          .row
            .col-md-8
              input.form-control(name="locations[{{i}}][formatted_address]", value="{{formatted_address}}", type="hidden")
              label.control-label=__("Street")
              input.form-control(name="locations[{{i}}][street]", value="{{street}}", type="text", readonly)
            .col-md-4
              label.control-label=__("Streetnumber")
              input.form-control(name="locations[{{i}}][streetnumber]", value="{{streetnumber}}", type="text", readonly)
          .row
            .col-md-2
              label.control-label=__("ZIP")
              input.form-control(name="locations[{{i}}][zip]", value="{{zip}}", type="text", readonly)
            .col-md-5
              label.control-label=__("City")
              input.form-control(name="locations[{{i}}][city]", value="{{city}}", type="text", required, readonly)
            .col-md-5
              label.control-label=__("Country")
              input.form-control(name="locations[{{i}}][country]", value="{{country}}", type="text", required, readonly)
          .row
            .col-md-6
              label.control-label=__("Latitude")
              input.form-control(name="locations[{{i}}][lat]", value="{{lat}}", type="text", readonly)
            .col-md-6
              label.control-label=__("Longitude")
              input.form-control(name="locations[{{i}}][lng]", value="{{lng}}", type="text", readonly)
  //- FIXME
  script.
    function geocodePosition(position, map, id) {
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({latLng: position}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          map.geocodeResult = results[0];
          placeMarker(map, results[0].geometry.location, id);
          $('#location' + id).find('.result').html(results[0].formatted_address);
          $('#location' + id).find('.save-address').removeClass('disabled');
        } else {
          $('#location' + id).find('.result').html('No result');
          $('#location' + id).find('.save-address').addClass('disabled');
        }
      });
    }
    function geocodeAddress(map, address, id) {
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          placeMarker(map, results[0].geometry.location);
          $('#location' + id).find('.result').html(results[0].formatted_address);
          $('#location' + id).find('.save-address').removeClass('disabled');
          google.maps.event.trigger(map, 'resize');
        } else {
          $('#location' + id).find('.result').html('No result');
          $('#location' + id).find('.save-address').addClass('disabled');
        }
      });
    }
    function searchLocation(map, id) {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          placeMarker(map, pos, id);
        }, function() {
          placeMarker(map, {lat: 0, lng: 0}, id);
        });
      }
    }
    function placeMarker(map, position, id) {
      map.markers.forEach(function(marker) {
        marker.setMap(null);
      });
      map.markers = [];
      var marker = new google.maps.Marker({
        draggable: true,
        map: map,
        position: position
      });
      map.markers.push(marker);
      google.maps.event.addListener(marker, 'dragend', function() {
        geocodePosition(marker.getPosition(), map, id);
      });
      google.maps.event.trigger(map, 'resize');
      map.setCenter(position);
    }
    function initMap(id, data) {
      var lat = (data && data.lat) || 0;
      var lng = (data && data.lng) || 0;
      var formatted_address = (data && data.formatted_address) || '';
      var latLng = {lat: parseFloat(lat), lng: parseFloat(lng)};
      var map = new google.maps.Map(document.getElementById('map' + id), {
        center: latLng,
        scrollwheel: false,
        zoom: 6
      });
      map.markers = [];
      $('#location' + id).find('.address').val(formatted_address);
      // Google Maps API Bug
      setTimeout(function() {
        searchLocation(map, id);
      }, 500);
      return map;
    }
  //- FIXME
  script.
    $(document).ready(function() {
      var source   = $("#location").html();
      var template = Handlebars.compile(source);
      var data = !{JSON.stringify(locations)};
      var total = data.length;
      var map;
      var id;
      data.forEach(function(location, i) {
        location.i = i;
        $(template(location)).appendTo($('#locations'));
      });
      $(document).keypress(function(ev){
        if (ev.which == '13') {
          ev.preventDefault();
        }
      });
      $(document).on('click', '.delete-location', function(ev) {
        ev.preventDefault();
        if ($('.location').length === 1) {
          alert('At least one location is required.');
        } else {
          $(this).closest('.location').remove();
        }
      });
      $(document).on('click', '.add-location', function(ev) {
        ev.preventDefault();
        $(template({i: total})).appendTo($('#locations'));
        total++;
      });
      $(document).on('click', '.show-location', function(ev) {
        ev.preventDefault();
        id = $(ev.currentTarget).attr('data-id');
        map = initMap(id, data[id]);
      });
      $(document).on('click', '.save-address', function(ev) {
        ev.preventDefault();
        if (!$(ev.currentTarget).hasClass('disabled')) {
          if (map.geocodeResult) {
            $('input[name*=locations\\[' + id + '\\]').val('');
            map.geocodeResult.address_components.forEach(function(item) {
              switch(item.types[0]) {
                case 'street_number':
                    $('input[name^=locations\\[' + id + '\\]\\[streetnumber\\]]').val(item.long_name);
                break;
                case 'route':
                    $('input[name^=locations\\[' + id + '\\]\\[street\\]]').val(item.long_name);
                break;
                case 'postal_code':
                    $('input[name^=locations\\[' + id + '\\]\\[zip\\]]').val(item.long_name);
                break;
                case 'locality':
                    $('input[name^=locations\\[' + id + '\\]\\[city\\]]').val(item.long_name);
                break;
                case 'country':
                    $('input[name^=locations\\[' + id + '\\]\\[country\\]]').val(item.long_name);
                break;
              }
            });
            var formatted_address = map.geocodeResult.formatted_address;
            $('input[name^=locations\\[' + id + '\\]\\[formatted_address\\]]').val(formatted_address);
            var lat = map.geocodeResult.geometry.location.lat();
            $('input[name^=locations\\[' + id + '\\]\\[lat\\]]').val(lat);
            var lng = map.geocodeResult.geometry.location.lng();
            $('input[name^=locations\\[' + id + '\\]\\[lng\\]]').val(lng);
            $('#location' + id).modal('hide');
          }
        }
      });
      $(document).on('click', '.search-address', function(ev) {
        ev.preventDefault();
        var address = $(ev.currentTarget).parents('.modal-body').find('.address').val();
        geocodeAddress(map, address, id);
      });
    });

mixin multilanguage-subtitle(subtitles)
  .form-group
    label.col-md-2.control-label=__("Subtitles")
    .col-md-10
      each language in config.locales
        .input-group.subtitle
          span.input-group-addon=__(language)
          input.form-control(name="subtitle[#{language}]", type="subtitle", value=subtitles[language])

mixin multilanguage-text(texts)
  .form-group#descriptions
    label.col-md-2.control-label=__("Description")
    .col-md-2
      .list-group
        each language, i in config.locales
          a.list-group-item(data-toggle="collapse", data-parent="#descriptions", href="#description-#{language}")=__(language)
    .col-md-8.panel
      each language,i in config.locales
        - var cls = i === 0 ? "in" : "";
        .collapse(id="description-#{language}", class=cls)
          textarea.form-control(name="text[#{language}]",rows="18")
            if texts
              if texts[language]
                =texts[language]

mixin render-alerts(alerts)
  if alerts
    each alert in alerts
      div(class="alert alert-#{alert.type}")
        span=alert.msg

mixin start-end-time(result, index)
  - var hours = ["00:00","00:30","01:00","01:30","02:00","02:30","03:00","03:30","04:00","04:30","05:00","05:30","06:00","06:30","07:00","07:30","08:00","08:30","09:00","09:30","10:00","10:30","11:00","11:30","12:00","12:30","13:00","13:30","14:00","14:30","15:00","15:30","16:00","16:30","17:00","17:30","18:00","18:30","19:00","19:30","20:00","20:30","21:00","21:30","22:00","22:30","23:00","23:30"]
  .form-group
    label.col-sm-2.control-label=__("Start time")+" "+(index+1)
    .col-sm-10
      select.form-control(name="date_time_venue["+index+"][start_time]",autocomplete="off")
        option=__("Choose")
          each hour in hours
            option(value=hour,selected=(result.date_time_venue[index].start_time == hour ? "selected" : undefined))=hour
  .form-group
    label.col-sm-2.control-label=__("End time")+" "+(index+1)
    .col-sm-10
      select.form-control(name="date_time_venue["+index+"][end_time]",autocomplete="off")
        option=__("Choose")
          each hour in hours
            option(value=hour,selected=(result.date_time_venue[index].end_time == hour ? "selected" : undefined))=hour

mixin venues(venues)
  fieldset
    legend=__("Venues")
    #venues.row
    .row
      .col-md-10.col-md-offset-2
        button.add-venue.btn.btn-default
          i.fa.fa-plus
          =" "
          =__("Add venue")
  script(id="venue", type="text/x-handlebars-template")
    .venue.col-md-10.col-md-offset-2
      .panel.panel-default
        .panel-body
          .row
            .col-md-12.text-right
              .btn-group
                button.show-venue.btn.btn-default
                  i.fa.fa-map
                button.delete-venue.btn.btn-danger
                  i.fa.fa-trash
          .row
            .col-md-12
              label.control-label=__("Venue")
              input.form-control(name="venues[{{i}}][venue]", value="{{venue}}", type="text")
          .row
            .col-md-4
              label.control-label=__("Date")
              .input-group.date(data-date-format="yyyy-mm-dd", data-date="{{date}}")
                input.form-control(name="venues[{{i}}][date]", value="{{date}}", type="text")
                span.input-group-addon
                  i.glyphicon.glyphicon-calendar
            .col-md-4
              label.control-label=__("Begin")
              .input-group
                input.form-control(name="venues[{{i}}][start_time]", value="{{start_time}}", type="text")
                span.input-group-addon
                  i.glyphicon.glyphicon-time
            .col-md-4
              label.control-label=__("End")
              .input-group
                input.form-control(name="venues[{{i}}][end_time]", value="{{end_time}}", type="text")
                span.input-group-addon
                  i.glyphicon.glyphicon-time
          .row
            .col-md-8
              label.control-label=__("Street")
              input.form-control(name="venues[{{i}}][street]", value="{{street}}", type="text")
            .col-md-4
              label.control-label=__("Streetnumber")
              input.form-control(name="venues[{{i}}][streetnumber]", value="{{streetnumber}}", type="text")
          .row
            .col-md-2
              label.control-label=__("ZIP")
              input.form-control(name="venues[{{i}}][zip]", value="{{zip}}", type="text")
            .col-md-5
              label.control-label=__("City")
              input.form-control(name="venues[{{i}}][city]", value="{{city}}", type="text")
            .col-md-5
              label.control-label=__("Country")
              input.form-control(name="venues[{{i}}][country]", value="{{country}}", type="text")
  //- FIXME
  script.
    $(document).ready(function() {
      var source   = $("#venue").html();
      var template = Handlebars.compile(source);
      var data = !{JSON.stringify(venues)};
      var total = data.length;
      data.forEach(function(venue, i) {
        venue.i = i;
        $(template(venue)).appendTo($('#venues'));
      });
      $(document).on('click', '.delete-venue', function(ev) {
        ev.preventDefault();
        $(this).closest('.venue').remove();
      });
      $(document).on('click', '.add-venue', function(ev) {
        ev.preventDefault();
        $(template({i: total})).appendTo($('#venues'));
        $('.date').datepicker({ });
        total++;
      });
    });
